# force locale
export LANG=en_US.UTF-8
export LANGUAGE=en_US

# use emacs-like key bindings
bindkey -e

# utility functions {{{
__source() {
	[[ -f $1 ]] && . "$1"
}
__source_files() {
	while [[ -n $1 ]]; do
		__source "$1"
		shift
	done
}
__prepend_path() {
	[[ ${path[(i)$1]} -gt ${#path} ]] && path=($1(N-/) $path)
}
__is_macos() {
	[[ $OSTYPE = darwin* ]]
}
# }}}

# load platform specific variables
__source ~/.zsh/platforms/"${$(uname):l}.zsh"

# command history settings {{{
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=50000
HISTORY_IGNORE="((l[als]|lla|popd)|(cd|l[als]|lla|man|scp|sftp|ssh|sudo|rm) *)"
zshaddhistory() {
	whence ${${(z)1}[1]} >| /dev/null || return 1
}
setopt hist_ignore_dups
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_no_store
setopt hist_reduce_blanks
setopt hist_save_no_dups
setopt share_history
# }}}

# general settings {{{
setopt autocd
setopt auto_pushd
setopt pushd_ignore_dups

setopt no_beep

setopt correct

# make '/' as word seperator
autoload -Uz select-word-style && select-word-style bash
# }}}

# aliases {{{
alias ls='ls -h --color=auto'
alias la='ls -A'
alias ll='ls -l'
alias lla='ls -lA'

alias grep='grep --color=auto'
[[ -n $DIFF_COLOR_OPT ]] && alias diff="diff $DIFF_COLOR_OPT"

alias mkdir='mkdir -p'

hash nvim 2>/dev/null && alias v='nvim'
# }}}

# environment variables {{{
export LESS=-RF
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
export LESSHISTFILE=-
# }}}

# syntax highlight {{{
if [[ -n $SYNTAX_HIGHLIGHT_SRC ]]; then
	__source "$SYNTAX_HIGHLIGHT_SRC"
	typeset -A ZSH_HIGHLIGHT_STYLES
	ZSH_HIGHLIGHT_STYLES[globbing]='none'
	ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
fi
# }}}

# prompt {{{
setopt prompt_subst

autoload -Uz colors && colors
autoload -Uz promptinit && promptinit

prompt_mytheme_setup() {
	PROMPT=$'\n''[%{$fg_bold[magenta]%}%n@%m%{$reset_color%}:%{$fg_bold[cyan]%}%c%{$reset_color%}]'
	if [[ -n $GIT_PS1_SRC ]]; then
		__source "$GIT_PS1_SRC" && PROMPT="$PROMPT"'$(__git_ps1 "(%s)")'
		GIT_PS1_SHOWDIRTYSTATE=1
		GIT_PS1_SHOWUNTRACKEDFILES=1
	fi
	PROMPT="$PROMPT"$'\n''%# '
}

prompt_themes+=(mytheme)
prompt mytheme
# }}}

# setup asdf {{{
if [[ -d ~/.asdf ]]; then
	__source ~/.asdf/asdf.sh
	fpath=(~/.asdf/completions $fpath)
fi
# }}}

# PATH setting {{{
# flutter
__prepend_path ~/.local/flutter/default/bin

# texlive
if __is_macos; then
	__prepend_path ~/.local/texlive/default/bin/universal-darwin
else
	__prepend_path ~/.local/texlive/default/bin/x86_64-linux
fi

# golang
hash go 2>/dev/null && __prepend_path "$(go env GOPATH)/bin"

__prepend_path ~/.local/bin
# }}}

# auto completion {{{
fpath=(~/.zsh/completions $fpath)
autoload -Uz compinit && compinit

# completion of pip
# $ pip completions --zsh | shfmt
function _pip_completion {
	local words cword
	read -Ac words
	read -cn cword
	reply=($(COMP_WORDS="$words[*]" \
		COMP_CWORD=$((cword - 1)) \
		PIP_AUTO_COMPLETE=1 $words[1] 2>/dev/null))
}
hash pip 2>/dev/null && compctl -K _pip_completion pip
hash pip3 2>/dev/null && compctl -K _pip_completion pip3
# }}}

# key settings {{{
bindkey "^U" backward-kill-line
# }}}

# load functions {{{
__source_files ~/.zsh/functions/*.zsh
# }}}

# unset utility functions {{{
unset -f __source
unset -f __source_files
unset -f __prepend_path
unset -f __is_macos
unload_variables
# }}}
